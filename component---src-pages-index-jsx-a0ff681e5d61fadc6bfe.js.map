{"version":3,"file":"component---src-pages-index-jsx-a0ff681e5d61fadc6bfe.js","mappings":"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","sources":["webpack://danielamarangon.com/./src/components/cards/photo-card/photo-card.component.jsx","webpack://danielamarangon.com/./src/pages/index.jsx"],"sourcesContent":["import React from \"react\";\nconst { GatsbyImage, getImage } = require(\"gatsby-plugin-image\");\n\n// if cover is empty its value is null; if videoCover is empty its value is empty array\nconst PhotoCard = ({ photo = {} }) => {\n  const linkedImage =\n    photo.gallery?.length > 0\n      ? {\n          url: photo.gallery[0].asset.url,\n          width: photo.gallery[0].asset.width,\n          height: photo.gallery[0].asset.height,\n        }\n      : null;\n\n  return (\n    <figure\n      className=\"grid-item col-6 col-md-4\"\n      itemProp=\"associatedMedia\"\n      itemScope\n      itemType=\"http://schema.org/ImageObject\"\n    >\n      <a\n        href={linkedImage ? linkedImage.url : \"/\"}\n        data-pswp-width={linkedImage ? linkedImage.width : \"\"}\n        data-pswp-height={linkedImage ? linkedImage.height : \"\"}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        itemProp=\"contentUrl\"\n      >\n        {photo.videoCover.length > 0 ? (\n          <video\n            poster={photo.cover?.asset?.url}\n            width={photo.cover?.asset?.width}\n            height={photo.cover?.asset?.height}\n            playsInline\n            autoPlay\n            muted\n            loop\n          >\n            {photo.videoCover.map((vid) => (\n              <source key={vid._key} src={vid.asset.url} />\n            ))}\n          </video>\n        ) : (\n          <GatsbyImage\n            className=\"img-fluid\"\n            image={getImage(photo.cover?.asset)}\n            alt=\"photo\"\n          />\n        )}\n      </a>\n      {photo.gallery?.length > 1 && photo.gallery.slice(1).map((galleryItem) => (\n        <a\n          key={galleryItem._key}\n          href={galleryItem.asset.url}\n          className=\"d-none\"\n          data-pswp-width={galleryItem.asset.width}\n          data-pswp-height={galleryItem.asset.height}\n        >\n          {galleryItem._key}\n        </a>\n      ))}\n    </figure>\n  );\n};\n\nexport default PhotoCard;\n","import React, { useEffect, useRef } from \"react\";\nimport PhotoSwipeLightbox from \"photoswipe/lightbox\";\nimport { graphql } from \"gatsby\";\nimport { allSanityTypeItems } from \"../utils/utils\";\nimport Layout from \"../components/layout/layout.component\";\nimport Seo from \"../components/seo/seo.component\";\nimport PhotoCard from \"../components/cards/photo-card/photo-card.component\";\nimport Masonry from \"masonry-layout\";\nimport imagesloaded from \"imagesloaded\";\nimport \"photoswipe/style.css\";\n\nconst PhotographyPage = ({ data }) => {\n  const ref = useRef();\n\n  useEffect(() => {\n    if (typeof Masonry === \"undefined\" && !!ref.current) {\n      console.log(\"ERROR: Masonry is not available. Fallback to bootstrap layout\");\n      ref.current.classList.add(\"row\", \"justify-content-center\");\n      return;\n    }\n\n    const imgLoad = imagesloaded(ref.current);\n\n    imgLoad.on('done', () => {\n      // console.log(\"[WARN] all images are loaded\");\n      new Masonry(\".gallery\", {\n        itemSelector: \".grid-item\", // The grid item selector\n        columnWidth: \".grid-item\", // The column width selector\n        gutter: 15, // Space between grid items\n        horizontalOrder: true, // Enable horizontal ordering\n        fitWidth: true,\n      });\n    });\n    // Cleanup function\n    return () => {\n      imgLoad.off('done');\n    };\n  }, []);\n\n  useEffect(() => {\n    let lightbox = new PhotoSwipeLightbox({\n      gallery: \"#gallery\",\n      children: \"a\",\n      pswpModule: () => import(\"photoswipe\"),\n    });\n    lightbox.init();\n\n    return () => {\n      lightbox.destroy();\n      lightbox = null;\n    };\n  }, []);\n\n  const photos = allSanityTypeItems(data, \"Photo\");\n\n  return (\n    <>\n      <Layout>\n        <main className=\"main container-fluid p-0\">\n          {photos?.length > 0 ? (\n            <div id=\"gallery\" ref={ref} className=\"gallery pt-3 pb-5 pswp-gallery\">\n              {photos.map((photo) => (\n                <PhotoCard key={photo._id} photo={photo} />\n              ))}\n            </div>\n          ) : (\n            <h2>...work in progress</h2>\n          )}\n        </main>\n      </Layout>\n    </>\n  );\n};\n\nexport const query = graphql`\n  query {\n    allSanityPhoto(sort: { orderRank: ASC }) {\n      edges {\n        node {\n          _id\n          title\n          videoCover {\n            _key\n            asset {\n              url\n            }\n          }\n          cover {\n            asset {\n              height\n              width\n              url\n              gatsbyImageData(width: 340, placeholder: BLURRED)\n            }\n          }\n          gallery {\n            _key\n            asset {\n              url\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default PhotographyPage;\n\nexport const Head = () => {\n  return (\n    <>\n      <Seo />\n      <body className=\"home\" />\n    </>\n  );\n};\n"],"names":["GatsbyImage","getImage","require","_ref","_photo$gallery","_photo$cover","_photo$cover$asset","_photo$cover2","_photo$cover2$asset","_photo$cover3","_photo$cover3$asset","_photo$cover4","_photo$gallery2","photo","linkedImage","gallery","length","url","asset","width","height","React","className","itemProp","itemScope","itemType","href","target","rel","videoCover","poster","cover","playsInline","autoPlay","muted","loop","map","vid","key","_key","src","image","alt","slice","galleryItem","data","ref","useRef","useEffect","Masonry","current","console","log","classList","add","imgLoad","imagesloaded","on","itemSelector","columnWidth","gutter","horizontalOrder","fitWidth","off","lightbox","PhotoSwipeLightbox","children","pswpModule","init","destroy","photos","allSanityTypeItems","Layout","id","PhotoCard","_id","Head","Seo"],"sourceRoot":""}