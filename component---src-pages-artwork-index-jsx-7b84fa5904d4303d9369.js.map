{"version":3,"file":"component---src-pages-artwork-index-jsx-7b84fa5904d4303d9369.js","mappings":"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","sources":["webpack://danielamarangon.com/./src/components/cards/artwork-card/artwork-card.component.jsx","webpack://danielamarangon.com/./src/pages/artwork/index.jsx"],"sourcesContent":["import React from \"react\";\nconst { GatsbyImage, getImage } = require(\"gatsby-plugin-image\");\n\n// if cover is empty its value is null; if videoCover is empty its value is empty array\nconst ArtworkCard = ({ photo = {} }) => {\n  const linkedImage =\n    photo.gallery?.length > 0\n      ? {\n          url: photo.gallery[0].image.asset.url,\n          width: photo.gallery[0].image.asset.width,\n          height: photo.gallery[0].image.asset.height,\n        }\n      : null;\n\n  return (\n    <figure\n      className={`grid-item ${photo.columnX2 ? \"grid-item--width2\" : \"\"} col-6 col-md-4`}\n      itemProp=\"associatedMedia\"\n      itemScope\n      itemType=\"http://schema.org/ImageObject\"\n    >\n      <a\n        href={linkedImage ? linkedImage.url : \"/\"}\n        data-pswp-width={linkedImage ? linkedImage.width : \"\"}\n        data-pswp-height={linkedImage ? linkedImage.height : \"\"}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        itemProp=\"contentUrl\"\n      >\n        {photo.videoCover?.length > 0 ? (\n          <video\n            poster={photo.cover?.asset?.url}\n            width={photo.cover?.asset?.width}\n            height={photo.cover?.asset?.height}\n            playsInline\n            autoPlay\n            muted\n            loop\n          >\n            {photo.videoCover.map((vid) => (\n              <source key={vid._key} src={vid.asset.url} />\n            ))}\n          </video>\n        ) : (\n          <GatsbyImage\n            className=\"img-fluid\"\n            image={getImage(photo.cover?.asset)}\n            alt=\"photo\"\n          />\n        )}\n      </a>\n      {photo.gallery?.length > 1 && photo.gallery.slice(1).map((galleryItem) => (\n        <a\n          key={galleryItem._key}\n          href={galleryItem.asset.url}\n          className=\"d-none\"\n          data-pswp-width={galleryItem.asset.width}\n          data-pswp-height={galleryItem.asset.height}\n        >\n          {galleryItem._key}\n        </a>\n      ))}\n    </figure>\n  );\n};\n\nexport default ArtworkCard;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport PhotoSwipeLightbox from \"photoswipe/lightbox\";\nimport { graphql } from \"gatsby\";\nimport { allSanityTypeItems } from \"../../utils/utils\";\nimport Layout from \"../../components/layout/layout.component\";\nimport ArtworkCard from \"../../components/cards/artwork-card/artwork-card.component\";\nimport Seo from \"../../components/seo/seo.component\";\nimport Masonry from \"masonry-layout\";\nimport imagesloaded from \"imagesloaded\";\nimport \"photoswipe/style.css\";\n\nconst ArtworkPage = ({ data }) => {\n  const [loaded, setLoaded] = useState(false);\n  const ref = useRef();\n\n  useEffect(() => {\n    if (typeof Masonry === \"undefined\" && !!ref.current) {\n      console.log(\"ERROR: Masonry is not available. Fallback to bootstrap layout\");\n      ref.current.classList.add(\"row\", \"justify-content-center\");\n      return;\n    }\n\n    const masonry = new Masonry(\".gallery\", {\n      itemSelector: \".grid-item\", // The grid item selector\n      columnWidth: \".grid-item\", // The column width selector\n      gutter: 15, // Space between grid items\n      horizontalOrder: true, // Enable horizontal ordering\n      fitWidth: true,\n    });\n\n    const imgLoad = imagesloaded(ref.current);\n\n    imgLoad.on(\"always\", () => {\n      masonry.layout();\n      setLoaded(true);\n    });\n    // Cleanup function\n    return () => {\n      imgLoad.off(\"done\");\n      masonry.destroy();\n    };\n  }, []);\n\n  useEffect(() => {\n    let lightbox = new PhotoSwipeLightbox({\n      gallery: \"#gallery\",\n      children: \"a\",\n      pswpModule: () => import(\"photoswipe\"),\n    });\n    lightbox.init();\n\n    return () => {\n      lightbox.destroy();\n      lightbox = null;\n    };\n  }, []);\n\n  const photos = allSanityTypeItems(data, \"Artwork\");\n\n  return (\n    <Layout>\n      <main className=\"main container-fluid p-0\">\n        {photos?.length > 0 ? (\n          <div\n            id=\"gallery\"\n            ref={ref}\n            className={`gallery ${loaded ? \"show\" : \"\"} pt-3 pb-5 pswp-gallery`}\n          >\n            {photos.map((photo) => (\n              <ArtworkCard key={photo._id} photo={photo} />\n            ))}\n          </div>\n        ) : (\n          <h2>...work in progress</h2>\n        )}\n      </main>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query {\n    allSanityArtwork(sort: { orderRank: ASC }) {\n      edges {\n        node {\n          _id\n          title\n          columnX2\n          cover {\n            asset {\n              height\n              width\n              url\n              gatsbyImageData(width: 695, placeholder: BLURRED)\n            }\n          }\n          gallery {\n            image {\n              asset {\n                url\n                width\n                height\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default ArtworkPage;\n\nexport const Head = () => {\n  return (\n    <>\n      <Seo pathname=\"artwork\" />\n      <body className=\"artwork\" />\n    </>\n  );\n};\n"],"names":["GatsbyImage","getImage","require","_ref","_photo$gallery","_photo$videoCover","_photo$cover","_photo$cover$asset","_photo$cover2","_photo$cover2$asset","_photo$cover3","_photo$cover3$asset","_photo$cover4","_photo$gallery2","photo","linkedImage","gallery","length","url","image","asset","width","height","React","className","columnX2","itemProp","itemScope","itemType","href","target","rel","videoCover","poster","cover","playsInline","autoPlay","muted","loop","map","vid","key","_key","src","alt","slice","galleryItem","data","loaded","setLoaded","useState","ref","useRef","useEffect","Masonry","current","console","log","classList","add","masonry","itemSelector","columnWidth","gutter","horizontalOrder","fitWidth","imgLoad","imagesloaded","on","layout","off","destroy","lightbox","PhotoSwipeLightbox","children","pswpModule","init","photos","allSanityTypeItems","Layout","id","ArtworkCard","_id","Head","Seo","pathname"],"sourceRoot":""}